apply plugin: 'java'
apply plugin: 'war'

sourceCompatibility = 1.7
targetCompatibility = 1.7

version = '1.0'

repositories {
    mavenCentral()
}

sourceSets {
    generated.java.srcDirs = ['src/main/generated']
}

configurations {
    querydslapt
}

def junitVersion = '4.11'
def hamcrestVersion = '1.3'
def springVersion = '4.0.1.RELEASE'
def springDataVersion = '1.4.3.RELEASE'
def hibernateVersion = '4.3.1.Final'
def jodaTimeVersion = '2.2'
def commonsLangVersion = '3.1'
def commonsCodecVersion = '1.7'
def jstlVersion = '1.2'
def tomcatVersion = '8.0.3'
def javassistVersion = '3.18.1-GA'
def mysqlConnectorVersion = '5.1.29'
def javaEEVersion = '7.0'
def querydslVersion = '3.2.3'

dependencies {
    testCompile "junit:junit:${junitVersion}"

    compile "org.springframework:spring-context:${springVersion}"
    compile "org.springframework:spring-webmvc:${springVersion}"
    compile "org.springframework:spring-tx:${springVersion}"
    compile "org.springframework:spring-orm:${springVersion}"
    compile "org.springframework.data:spring-data-jpa:${springDataVersion}"
    compile "org.hibernate:hibernate-core:${hibernateVersion}"
    compile "org.hibernate:hibernate-entitymanager:${hibernateVersion}"
    compile "jstl:jstl:${jstlVersion}"
    compile "org.apache.tomcat:tomcat-dbcp:${tomcatVersion}"
    compile "org.javassist:javassist:${javassistVersion}"
    // compile "com.mysema.querydsl:querydsl-apt:${querydslVersion}"
    compile "com.mysema.querydsl:querydsl-jpa:${querydslVersion}"

    runtime "mysql:mysql-connector-java:${mysqlConnectorVersion}"

    providedCompile "javax:javaee-api:${javaEEVersion}"

    querydslapt "com.mysema.querydsl:querydsl-apt:${querydslVersion}"
}

task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
    source = sourceSets.main.java
    classpath = configurations.compile + configurations.querydslapt
    options.compilerArgs = [
            "-proc:only",
            "-processor", "com.mysema.query.apt.jpa.JPAAnnotationProcessor"
    ]
    destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
    dependencyCacheDir = new File(destinationDir, "dependencyCacheDir")
}

compileJava {
    dependsOn generateQueryDSL
    source generateQueryDSL.destinationDir
}

compileGeneratedJava {
    dependsOn generateQueryDSL
    options.warnings = false
    classpath += sourceSets.main.runtimeClasspath
}

clean {
    delete sourceSets.generated.java.srcDirs
}